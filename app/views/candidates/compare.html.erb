<div class="container">
  <div class="row">
    <div class="col-sm-9">
      <div class="chart-container">
      </div>
    </div>
    <div class="col-sm-3">
      <h2>Some crazy analysis</h2>
      <form action="#">
        <div class="form-group">
          <label for="x-axis">X-axis</label>
          <select type="text" class="form-control" prompt="Quel critère ?" id="x-axis">
            <option value="retweets">Retweets</option>
            <option value="favorites">Favorites</option>
            <option value="followers">Followers</option>
            <option value="whatever">Whatever</option>
          </select>
        </div>
        <div class="form-group">
          <label for="x-axis">Y-axis</label>
          <select type="text" class="form-control" prompt="Quel critère ?" id="y-axis">
            <option value="retweets">Retweets</option>
            <option value="favorites">Favorites</option>
            <option value="followers">Followers</option>
            <option value="whatever">Whatever</option>
          </select>
        </div>
      </form>
    </div>
  </div>
</div>


<style>
body {
  font: 11px sans-serif;
}
.chart-container {
  background-color: white;
  padding: 10px;
  border-radius: 5px;
  box-shadow: 1px 1px 3px #F2F2F2;
  margin-bottom: 50px;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.dot {
  stroke: none;
}

.tooltip {
  position: absolute;
  width: 200px;
  height: 28px;
  pointer-events: none;
}
.label {
  font-size: 15px;
  font-weight: lighter;
}
.tick {
  font-size: 15px;
  font-weight: normal;
}
.card-candidate {
  background: white;
  padding: 20px;
  border-radius: 4px;
}
.card-candidate h2 {
  font-size: 15px;
  font-weight: lighter;
  margin-top: 0px;
}
</style>


<% content_for(:after_js) do %>
  <script>

  var margin = {top: 20, right: 20, bottom: 30, left: 40},
      width = window.innerWidth * 0.6,
      height = 500 - margin.top - margin.bottom;
  /*
   * value accessor - returns the value to encode for a given data object.
   * scale - maps value to a visual display encoding, such as a pixel position.
   * map function - maps from data value to display value
   * axis - sets up axis
   */

  var data = [{
               name: "Claude Bartolone",
               favorites: 12,
               retweets: 5,
               followers: 150000
             },
             {
               name: "Valérie Pécresse",
               favorites: 15,
               retweets: 10,
               followers: 150000
             },
             {
               name: "Emmanuelle Cosse",
               favorites: 25,
               retweets: 4,
               followers: 20000
             },
             {
               name: "Nathalie Arthaud",
               favorites: 25,
               retweets: 7,
               followers: 100000
             }]

  // setup x
  var xValue = function(d) { return d["retweets"];}, // data -> value
    xScale = d3.scale.linear().range([0, width]), // value -> display
    xMap = function(d) { return xScale(xValue(d));}, // data -> display
    xAxis = d3.svg.axis().scale(xScale).orient("bottom");

  // setup y
  var yValue = function(d) { return d["favorites"];}, // data -> value
    yScale = d3.scale.linear().range([height, 0]), // value -> display
    yMap = function(d) { return yScale(yValue(d));}, // data -> display
    yAxis = d3.svg.axis().scale(yScale).orient("left");

  // setup y
  var rValue = function(d) { return d["followers"];}, // data -> value
    rScale = d3.scale.linear().range([0, 30]).domain([0, 200000]), // value -> display
    rMap = function(d) { return rScale(rValue(d));}; // data -> display

  // Setup fill color
  var color = d3.scale.linear().range(["#5778c1","#3E5A9A"]).domain([0, 1, 2, 3]);

  $("#x-axis").on("change", function(e){
    console.log("yes");
    var xValue = function(d) { return d["followers"];}, // data -> value
        xScale = d3.scale.linear().range([0, width]).domain([0, 200000]), // value -> display
        xMap = function(d) { return xScale(xValue(d));};// data -> display
    buildGraph(data, xMap, yMap, xValue, yValue);
  });
  $("#y-axis").on("change", function(e){
    var yValue = function(d) { return d["favorites"];}, // data -> value
        yScale = d3.scale.linear().range([height, 0]), // value -> display
        yMap = function(d) { return yScale(yValue(d));}; // data -> display
    buildGraph(data, xMap, yMap, xValue, yValue);
  });

  var buildGraph = function(data, xMap, yMap, xValue, yValue) {
    d3.selectAll("svg").remove();

    // add the graph canvas to the body of the webpage
    var svg = d3.select(".chart-container").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // add the tooltip area to the webpage
    var tooltip = d3.select("body").append("div")
        .attr("class", "tooltip")
        .style("opacity", 0);

    // Don't want dots overlapping axis, so add in buffer to data domain
    xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
    yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);

    // x-axis
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
      .append("text")
        .attr("class", "label")
        .attr("x", width)
        .attr("y", -6)
        .style("text-anchor", "end")
        .text("Retweets");

    // y-axis
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("class", "label")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Favorites");

    // draw dots
    svg.selectAll(".dot")
        .data(data)
      .enter().append("circle")
        .attr("class", "dot")
        .attr("r", rMap)
        .attr("cx", xMap)
        .attr("cy", yMap)
        .style("fill", function(d, i) { return color(i);})
        .on("mouseover", function(d) {
            tooltip.transition()
                 .duration(200)
                 .style("opacity", .9);
            tooltip.html("<div class='card-candidate text-center'>"
                          + "<h2>" + d["name"] + "</h2>"
                          + "<img src='http://placehold.it/100x100' class='img-circle'>"
                          + "</div>")
                 .style("left", (d3.event.pageX + 5) + "px")
                 .style("top", (d3.event.pageY - 28) + "px");
        })
        .on("mouseout", function(d) {
            tooltip.transition()
                 .duration(500)
                 .style("opacity", 0);
        });


    // draw legend
    var legend = svg.selectAll(".legend")
        .data(color.domain())
      .enter().append("g")
        .attr("class", "legend")
        .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

    // draw legend colored rectangles
    legend.append("rect")
        .attr("x", width - 18)
        .attr("width", 18)
        .attr("height", 18)
        .style("fill", color)
        .attr("rx", "4")
        .attr("ry", "4")
        .on("mouseover", function(d) {
          d3.select("'#' + d['name']").transition().attr("r", rMap*2)
        });

    // draw legend text
    legend.append("text")
        .attr("x", width - 24)
        .attr("y", 9)
        .attr("dy", ".35em")
        .style("text-anchor", "end")
        .text(function(i) { return data[i]["name"];})
  };

  buildGraph(data, xMap, yMap, xValue, yValue);

  </script>
<% end %>


