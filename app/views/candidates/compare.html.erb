<div class="container page-padding">
<!--   <div class="header">
    <h1>Compare the candidates</h1>
  </div> -->

  <div class="row">
  <!-- A GAUCHE -->
    <div class="col-xs-12 col-md-3">
      <div class="candidate-menu">
        <div class="candidate-flex">
          <% @candidates.each do |candidate| %>
            <div class="candidate-button">
              <div class="candidate-avatar" id="<%=candidate.screen_name%>" data-target="#<%=candidate.id%>">
                <%= image_tag candidate.picture %>
              </div>
              <div class="candidate-info hidden-xs hidden-sm">
                <div class="candidate-name">
                  <%= candidate.name %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>

<!-- GRAPHS -->
    <div class="col-xs-12 col-md-9">
      <div class='chart-menu'>
        <div id='followings-menu' data-chart='followings' class='chart-menu-item active cursor'>Comptes</div>
        <div id='followers-menu' data-chart='followers' class='chart-menu-item cursor'>Communautés</div>
        <div id='favorites-menu' data-chart='favorites' class='chart-menu-item cursor'>Performances</div>
      </div>
      <hr id="filet">
      <p class="legend" id="followings-legend">Comparez le nombre de personnes qui suivent et qui sont suivies par chaque candidat</p>
      <p class="legend hidden" id="followers-legend">Comparez le nombre moyen de followers et de tweets publiés par les abonnés de chaque candidat</p>
      <p class="legend hidden" id="favorites-legend">Comparez le nombre moyen de retweets et de favoris reçus par les tweets de chaque candidat</p>
      <div class="chart-overlay">
        <div class="chart-container" id="followings"></div>
        <div class="chart-container hidden" id="followers"></div>
        <div class="chart-container hidden" id="favorites"></div>
      </div>
    </div>

  </div>
</div>

<!-- CREEPY SCATTER_BOB -->

<% content_for(:after_js) do %>
  <script>

  var margin = {top: 20, right: 20, bottom: 30, left: 40},
      // width = window.innerWidth * 0.6,
      width = $('.chart-container').width() - 60,
      height = 500 - margin.top - margin.bottom;
  /*
   * value accessor - returns the value to encode for a given data object.
   * scale - maps value to a visual display encoding, such as a pixel position.
   * map function - maps from data value to display value
   * axis - sets up axis
   */

  var data = <%= @data_retweets_favorites.to_json.html_safe %>;

  // setup x
  var xValue = function(d) { return d["favorites"];}, // data -> value
      xScale = d3.scale.linear().range([0, width]), // value -> display
      xMap = function(d) { return xScale(xValue(d));}, // data -> display
      xAxis = d3.svg.axis().scale(xScale).orient("bottom");

  // setup y
  var yValue = function(d) { return d["retweets"];}, // data -> value
      yScale = d3.scale.linear().range([height, 0]), // value -> display
      yMap = function(d) { return yScale(yValue(d));}, // data -> display
      yAxis = d3.svg.axis().scale(yScale).orient("left");

  // Setup fill color
  var color = d3.scale.category10();

  // add the graph canvas to the body of the webpage
  var svg = d3.select("#favorites").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // add the tooltip area to the webpage
  var tooltip = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  // Don't want dots overlapping axis, so add in buffer to data domain
  xScale.domain([d3.min(data, xValue) - 0.1, d3.max(data, xValue)]);
  yScale.domain([d3.min(data, yValue) - 5, d3.max(data, yValue)]);

  // x-axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text("Favorites");

  // y-axis
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Retweets");

  // draw dots
  svg.selectAll(".dot")
      .data(data)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 12)
      .attr("cx", xMap)
      .attr("cy", yMap)
      .attr("id", function(d) { return d["id"]})
      .style("fill", function(d, i) { return color(i);})
      .on("mouseover", function(d) {
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html("<div class='card-candidate text-center'>"
                        + "<h2>" + d["name"] + "</h2>"
                        + "</div>")
               .style("left", (d3.event.pageX - 180) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });

  </script>
<% end %>

<% content_for(:after_js) do %>
  <script>

  var margin = {top: 20, right: 20, bottom: 30, left: 40},
      // width = window.innerWidth * 0.6,
      width = $('.chart-container').width() - 60,
      height = 500 - margin.top - margin.bottom;
  /*
   * value accessor - returns the value to encode for a given data object.
   * scale - maps value to a visual display encoding, such as a pixel position.
   * map function - maps from data value to display value
   * axis - sets up axis
   */

  var data = <%= @data_followers_followers.to_json.html_safe %>;

  // setup x
  var xValue = function(d) { return d["followers_tweets"];}, // data -> value
      xScale = d3.scale.linear().range([0, width]), // value -> display
      xMap = function(d) { return xScale(xValue(d));}, // data -> display
      xAxis = d3.svg.axis().scale(xScale).orient("bottom");

  // setup y
  var yValue = function(d) { return d["followers_followers"];}, // data -> value
      yScale = d3.scale.linear().range([height, 0]), // value -> display
      yMap = function(d) { return yScale(yValue(d));}, // data -> display
      yAxis = d3.svg.axis().scale(yScale).orient("left");

  // Setup fill color
  var color = d3.scale.category10();

  // add the graph canvas to the body of the webpage
  var svg = d3.select("#followers").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // add the tooltip area to the webpage
  var tooltip = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  // Don't want dots overlapping axis, so add in buffer to data domain
  xScale.domain([d3.min(data, xValue)-400, d3.max(data, xValue)+400]);
  yScale.domain([d3.min(data, yValue)-400, d3.max(data, yValue)+400]);

  // x-axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text("Tweets");

  // y-axis
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Followers");

  // draw dots
  svg.selectAll(".dot")
      .data(data)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 12)
      .attr("cx", xMap)
      .attr("cy", yMap)
      .attr("id", function(d) { return d["id"]})
      .style("fill", function(d, i) { return color(i);})
      .on("mouseover", function(d) {
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html("<div class='card-candidate text-center'>"
                        + "<h2>" + d["name"] + "</h2>"
                        + "</div>")
               .style("left", (d3.event.pageX - 180) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });

  </script>
<% end %>

<% content_for(:after_js) do %>
  <script>

  var margin = {top: 20, right: 20, bottom: 30, left: 40},
      // width = window.innerWidth * 0.6,
      width = $('.chart-container').width() - 60,
      height = 500 - margin.top - margin.bottom;
  /*
   * value accessor - returns the value to encode for a given data object.
   * scale - maps value to a visual display encoding, such as a pixel position.
   * map function - maps from data value to display value
   * axis - sets up axis
   */

  var data = <%= @data_followers_followings.to_json.html_safe %>;

  // setup x
  var xValue = function(d) { return d["followings"] / 1000 ;}, // data -> value
      xScale = d3.scale.linear().range([0, width]), // value -> display
      xMap = function(d) { return xScale(xValue(d));}, // data -> display
      xAxis = d3.svg.axis().scale(xScale).orient("bottom");

  // setup y
  var yValue = function(d) { return d["followers"] / 1000 ;}, // data -> value
      yScale = d3.scale.linear().range([height, 0]), // value -> display
      yMap = function(d) { return yScale(yValue(d));}, // data -> display
      yAxis = d3.svg.axis().scale(yScale).orient("left");

  // Setup fill color
  var color = d3.scale.category10();

  // add the graph canvas to the body of the webpage
  var svg = d3.select("#followings").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // add the tooltip area to the webpage
  var tooltip = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

  // Don't want dots overlapping axis, so add in buffer to data domain
  xScale.domain([d3.min(data, xValue) - 0.1, d3.max(data, xValue)]);
  yScale.domain([d3.min(data, yValue) - 5, d3.max(data, yValue)]);

  // x-axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text("Kilo-Followings");

  // y-axis
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Kilo-Followers");

  // draw dots
  svg.selectAll(".dot")
      .data(data)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 12)
      .attr("cx", xMap)
      .attr("cy", yMap)
      .attr("id", function(d) { return d["id"]})
      .style("fill", function(d, i) { return color(i);})
      .on("mouseover", function(d) {
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html("<div class='card-candidate text-center'>"
                        + "<h2>" + d["name"] + "</h2>"
                        + "</div>")
               .style("left", (d3.event.pageX - 180) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });

  </script>
<% end %>





